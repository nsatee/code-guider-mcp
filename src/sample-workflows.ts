import type { Workflow } from './types';

export const SAMPLE_WORKFLOWS: Workflow[] = [
  // Project Analysis Workflow
  {
    id: 'project-analysis',
    name: 'Project Analysis',
    description:
      'Comprehensive project analysis including code quality, structure, and optimization opportunities',
    tags: ['analysis', 'project', 'code-review', 'audit', 'quality'],
    steps: [
      {
        id: 'analyze-project-structure',
        name: 'Analyze Project Structure',
        description: 'Examine project structure, dependencies, and architecture',
        action: 'analyze',
        order: 1,
        filePath: 'project-structure-analysis.md',
      },
      {
        id: 'identify-unused-code',
        name: 'Identify Unused Code',
        description: 'Find unused imports, variables, functions, and files',
        action: 'analyze',
        order: 2,
        filePath: 'unused-code-report.md',
      },
      {
        id: 'analyze-code-quality',
        name: 'Analyze Code Quality',
        description: 'Check code quality, patterns, and best practices compliance',
        action: 'analyze',
        order: 3,
        filePath: 'code-quality-report.md',
      },
      {
        id: 'generate-recommendations',
        name: 'Generate Recommendations',
        description: 'Create actionable recommendations for improvement',
        action: 'create',
        order: 4,
        filePath: 'improvement-recommendations.md',
      },
    ],
    qualityChecks: [
      'Project structure is well-organized',
      'No unused code is identified',
      'Code follows best practices',
      'Recommendations are actionable',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },

  // Code Refactoring Workflow
  {
    id: 'code-refactoring',
    name: 'Code Refactoring',
    description: 'Refactor code to improve structure, readability, and maintainability',
    tags: ['refactoring', 'code-improvement', 'cleanup', 'maintainability'],
    steps: [
      {
        id: 'identify-refactoring-opportunities',
        name: 'Identify Refactoring Opportunities',
        description: 'Find code that needs refactoring based on complexity and patterns',
        action: 'analyze',
        order: 1,
        filePath: 'refactoring-opportunities.md',
      },
      {
        id: 'refactor-unused-code',
        name: 'Remove Unused Code',
        description: 'Remove unused imports, variables, functions, and files',
        action: 'modify',
        order: 2,
        filePath: 'src/',
      },
      {
        id: 'consolidate-duplicate-code',
        name: 'Consolidate Duplicate Code',
        description: 'Identify and consolidate duplicate code patterns',
        action: 'modify',
        order: 3,
        filePath: 'src/',
      },
      {
        id: 'improve-code-structure',
        name: 'Improve Code Structure',
        description: 'Restructure code for better organization and readability',
        action: 'modify',
        order: 4,
        filePath: 'src/',
      },
      {
        id: 'validate-refactoring',
        name: 'Validate Refactoring',
        description: 'Run tests and quality checks to ensure refactoring is successful',
        action: 'validate',
        order: 5,
        filePath: 'src/',
      },
    ],
    qualityChecks: [
      'No unused code remains',
      'Duplicate code is consolidated',
      'Code structure is improved',
      'All tests pass after refactoring',
      'Code follows DRY principles',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },

  // Project Cleanup Workflow
  {
    id: 'project-cleanup',
    name: 'Project Cleanup',
    description: 'Clean up project by removing unused code, files, and optimizing structure',
    tags: ['cleanup', 'unused-code', 'code-optimization', 'maintenance'],
    steps: [
      {
        id: 'scan-unused-imports',
        name: 'Scan Unused Imports',
        description: 'Find and remove unused import statements',
        action: 'modify',
        order: 1,
        filePath: 'src/',
      },
      {
        id: 'remove-unused-variables',
        name: 'Remove Unused Variables',
        description: 'Find and remove unused variables and constants',
        action: 'modify',
        order: 2,
        filePath: 'src/',
      },
      {
        id: 'remove-unused-functions',
        name: 'Remove Unused Functions',
        description: 'Find and remove unused functions and methods',
        action: 'modify',
        order: 3,
        filePath: 'src/',
      },
      {
        id: 'remove-unused-files',
        name: 'Remove Unused Files',
        description: 'Identify and remove unused files and directories',
        action: 'modify',
        order: 4,
        filePath: 'src/',
      },
      {
        id: 'remove-commented-code',
        name: 'Remove Commented Code',
        description: 'Remove commented-out code blocks (except TODO comments)',
        action: 'modify',
        order: 5,
        filePath: 'src/',
      },
      {
        id: 'organize-imports',
        name: 'Organize Imports',
        description: 'Sort and organize import statements',
        action: 'modify',
        order: 6,
        filePath: 'src/',
      },
      {
        id: 'validate-cleanup',
        name: 'Validate Cleanup',
        description: 'Run tests and linting to ensure cleanup is successful',
        action: 'validate',
        order: 7,
        filePath: 'src/',
      },
    ],
    qualityChecks: [
      'No unused imports remain',
      'No unused variables remain',
      'No unused functions remain',
      'No unused files remain',
      'No commented code remains (except TODOs)',
      'Imports are properly organized',
      'All tests pass after cleanup',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },

  // Code Quality Improvement Workflow
  {
    id: 'code-quality-improvement',
    name: 'Code Quality Improvement',
    description: 'Improve code quality by applying best practices and standards',
    tags: ['quality', 'standards', 'best-practices', 'conventions'],
    steps: [
      {
        id: 'analyze-code-standards',
        name: 'Analyze Code Standards',
        description: 'Check current code against quality standards and conventions',
        action: 'analyze',
        order: 1,
        filePath: 'code-standards-analysis.md',
      },
      {
        id: 'apply-naming-conventions',
        name: 'Apply Naming Conventions',
        description: 'Ensure consistent naming conventions across the codebase',
        action: 'modify',
        order: 2,
        filePath: 'src/',
      },
      {
        id: 'improve-code-formatting',
        name: 'Improve Code Formatting',
        description: 'Apply consistent code formatting and style',
        action: 'modify',
        order: 3,
        filePath: 'src/',
      },
      {
        id: 'add-type-annotations',
        name: 'Add Type Annotations',
        description: 'Add proper TypeScript type annotations where missing',
        action: 'modify',
        order: 4,
        filePath: 'src/',
      },
      {
        id: 'improve-error-handling',
        name: 'Improve Error Handling',
        description: 'Enhance error handling and validation',
        action: 'modify',
        order: 5,
        filePath: 'src/',
      },
      {
        id: 'validate-quality-improvements',
        name: 'Validate Quality Improvements',
        description: 'Run linting and tests to validate quality improvements',
        action: 'validate',
        order: 6,
        filePath: 'src/',
      },
    ],
    qualityChecks: [
      'Naming conventions are consistent',
      'Code formatting is uniform',
      'Type annotations are complete',
      'Error handling is robust',
      'All linting rules pass',
      'Code follows best practices',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'react-button-component',
    name: 'React Button Component',
    description: 'Create a reusable React button component with TypeScript and Tailwind CSS',
    tags: ['ui', 'component', 'button', 'react', 'typescript', 'tailwind'],
    steps: [
      {
        id: 'create-button-component',
        name: 'Create Button Component File',
        description: 'Create the main button component file with TypeScript interface',
        action: 'create',
        order: 1,
        template: 'react-button-component',
        filePath: 'src/components/Button.tsx',
      },
      {
        id: 'add-button-styles',
        name: 'Add Button Styles',
        description: 'Add Tailwind CSS classes for different button variants',
        action: 'modify',
        order: 2,
        filePath: 'src/components/Button.tsx',
      },
      {
        id: 'create-button-tests',
        name: 'Create Button Tests',
        description: 'Write comprehensive unit tests for the button component',
        action: 'test',
        order: 3,
        template: 'react-component-test',
        filePath: 'src/components/__tests__/Button.test.tsx',
      },
      {
        id: 'validate-button',
        name: 'Validate Button Component',
        description: 'Run quality checks and validation on the button component',
        action: 'validate',
        order: 4,
        filePath: 'src/components/Button.tsx',
      },
    ],
    qualityChecks: [
      'TypeScript types are properly defined',
      'Component is properly exported',
      'Props interface is comprehensive',
      'Accessibility attributes are included',
      'Tests cover all variants and edge cases',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'react-form-component',
    name: 'React Form Component',
    description: 'Create a reusable React form component with validation and error handling',
    tags: ['ui', 'component', 'form', 'react', 'typescript', 'validation'],
    steps: [
      {
        id: 'create-form-component',
        name: 'Create Form Component File',
        description: 'Create the main form component file with TypeScript interface',
        action: 'create',
        order: 1,
        template: 'react-form-component',
        filePath: 'src/components/Form.tsx',
      },
      {
        id: 'add-form-validation',
        name: 'Add Form Validation',
        description: 'Implement form validation logic with error handling',
        action: 'modify',
        order: 2,
        filePath: 'src/components/Form.tsx',
      },
      {
        id: 'create-form-tests',
        name: 'Create Form Tests',
        description: 'Write comprehensive unit tests for the form component',
        action: 'test',
        order: 3,
        template: 'react-form-test',
        filePath: 'src/components/__tests__/Form.test.tsx',
      },
      {
        id: 'validate-form',
        name: 'Validate Form Component',
        description: 'Run quality checks and validation on the form component',
        action: 'validate',
        order: 4,
        filePath: 'src/components/Form.tsx',
      },
    ],
    qualityChecks: [
      'Form validation is comprehensive',
      'Error states are properly handled',
      'Accessibility attributes are included',
      'TypeScript types are properly defined',
      'Tests cover validation scenarios',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'react-modal-component',
    name: 'React Modal Component',
    description: 'Create a reusable React modal component with backdrop and animations',
    tags: ['ui', 'component', 'modal', 'react', 'typescript', 'animation'],
    steps: [
      {
        id: 'create-modal-component',
        name: 'Create Modal Component File',
        description: 'Create the main modal component file with TypeScript interface',
        action: 'create',
        order: 1,
        template: 'react-modal-component',
        filePath: 'src/components/Modal.tsx',
      },
      {
        id: 'add-modal-animations',
        name: 'Add Modal Animations',
        description: 'Implement smooth open/close animations and backdrop',
        action: 'modify',
        order: 2,
        filePath: 'src/components/Modal.tsx',
      },
      {
        id: 'create-modal-tests',
        name: 'Create Modal Tests',
        description: 'Write comprehensive unit tests for the modal component',
        action: 'test',
        order: 3,
        template: 'react-modal-test',
        filePath: 'src/components/__tests__/Modal.test.tsx',
      },
      {
        id: 'validate-modal',
        name: 'Validate Modal Component',
        description: 'Run quality checks and validation on the modal component',
        action: 'validate',
        order: 4,
        filePath: 'src/components/Modal.tsx',
      },
    ],
    qualityChecks: [
      'Modal is properly centered and positioned',
      'Backdrop click closes modal',
      'Escape key closes modal',
      'Focus management is implemented',
      'Accessibility attributes are included',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'express-api-endpoint',
    name: 'Express API Endpoint',
    description: 'Create a RESTful API endpoint with Express.js, validation, and error handling',
    tags: ['api', 'backend', 'endpoint', 'express', 'nodejs', 'validation'],
    steps: [
      {
        id: 'create-api-route',
        name: 'Create API Route File',
        description: 'Create the main API route file with Express.js setup',
        action: 'create',
        order: 1,
        template: 'express-api-route',
        filePath: 'src/routes/api.ts',
      },
      {
        id: 'add-request-validation',
        name: 'Add Request Validation',
        description: 'Implement request validation middleware and error handling',
        action: 'modify',
        order: 2,
        filePath: 'src/routes/api.ts',
      },
      {
        id: 'create-api-tests',
        name: 'Create API Tests',
        description: 'Write comprehensive integration tests for the API endpoint',
        action: 'test',
        order: 3,
        template: 'express-api-test',
        filePath: 'src/routes/__tests__/api.test.ts',
      },
      {
        id: 'validate-api',
        name: 'Validate API Endpoint',
        description: 'Run quality checks and validation on the API endpoint',
        action: 'validate',
        order: 4,
        filePath: 'src/routes/api.ts',
      },
    ],
    qualityChecks: [
      'Request validation is comprehensive',
      'Error responses are properly formatted',
      'HTTP status codes are correct',
      'Security headers are included',
      'Tests cover all endpoints and error cases',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'express-crud-operations',
    name: 'Express CRUD Operations',
    description:
      'Create full CRUD operations for a resource with Express.js and database integration',
    tags: ['api', 'crud', 'database', 'express', 'nodejs', 'backend'],
    steps: [
      {
        id: 'create-crud-controller',
        name: 'Create CRUD Controller',
        description: 'Create the main CRUD controller with all operations',
        action: 'create',
        order: 1,
        template: 'express-crud-controller',
        filePath: 'src/controllers/resourceController.ts',
      },
      {
        id: 'add-database-integration',
        name: 'Add Database Integration',
        description: 'Implement database operations for CRUD functionality',
        action: 'modify',
        order: 2,
        filePath: 'src/controllers/resourceController.ts',
      },
      {
        id: 'create-crud-tests',
        name: 'Create CRUD Tests',
        description: 'Write comprehensive tests for all CRUD operations',
        action: 'test',
        order: 3,
        template: 'express-crud-test',
        filePath: 'src/controllers/__tests__/resourceController.test.ts',
      },
      {
        id: 'validate-crud',
        name: 'Validate CRUD Operations',
        description: 'Run quality checks and validation on CRUD operations',
        action: 'validate',
        order: 4,
        filePath: 'src/controllers/resourceController.ts',
      },
    ],
    qualityChecks: [
      'All CRUD operations are implemented',
      'Database transactions are properly handled',
      'Error handling is comprehensive',
      'Input validation is in place',
      'Tests cover all CRUD scenarios',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'jest-unit-tests',
    name: 'Jest Unit Tests',
    description: 'Create comprehensive unit tests using Jest and React Testing Library',
    tags: ['testing', 'unit', 'jest', 'react-testing-library', 'vitest'],
    steps: [
      {
        id: 'create-test-file',
        name: 'Create Test File',
        description: 'Create the main test file with Jest setup',
        action: 'create',
        order: 1,
        template: 'jest-unit-test',
        filePath: 'src/__tests__/component.test.tsx',
      },
      {
        id: 'add-test-cases',
        name: 'Add Test Cases',
        description: 'Write comprehensive test cases covering all scenarios',
        action: 'modify',
        order: 2,
        filePath: 'src/__tests__/component.test.tsx',
      },
      {
        id: 'add-test-utilities',
        name: 'Add Test Utilities',
        description: 'Create test utilities and helper functions',
        action: 'create',
        order: 3,
        template: 'jest-test-utilities',
        filePath: 'src/__tests__/test-utils.tsx',
      },
      {
        id: 'validate-tests',
        name: 'Validate Tests',
        description: 'Run tests and validate coverage and quality',
        action: 'validate',
        order: 4,
        filePath: 'src/__tests__/component.test.tsx',
      },
    ],
    qualityChecks: [
      'Test coverage is above 80%',
      'All edge cases are covered',
      'Mock functions are properly used',
      'Test descriptions are clear',
      'Tests are maintainable and readable',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'tailwind-styling',
    name: 'Tailwind CSS Styling',
    description: 'Add comprehensive Tailwind CSS styling to components with responsive design',
    tags: ['styling', 'css', 'tailwind', 'ui', 'responsive'],
    steps: [
      {
        id: 'add-tailwind-classes',
        name: 'Add Tailwind Classes',
        description: 'Add Tailwind CSS classes for styling and layout',
        action: 'modify',
        order: 1,
        filePath: 'src/components/Component.tsx',
      },
      {
        id: 'add-responsive-design',
        name: 'Add Responsive Design',
        description: 'Implement responsive design with Tailwind breakpoints',
        action: 'modify',
        order: 2,
        filePath: 'src/components/Component.tsx',
      },
      {
        id: 'add-dark-mode',
        name: 'Add Dark Mode Support',
        description: 'Implement dark mode support with Tailwind dark mode classes',
        action: 'modify',
        order: 3,
        filePath: 'src/components/Component.tsx',
      },
      {
        id: 'validate-styling',
        name: 'Validate Styling',
        description: 'Run styling validation and accessibility checks',
        action: 'validate',
        order: 4,
        filePath: 'src/components/Component.tsx',
      },
    ],
    qualityChecks: [
      'Responsive design works on all screen sizes',
      'Dark mode is properly implemented',
      'Accessibility standards are met',
      'CSS classes are organized and maintainable',
      'Design system consistency is maintained',
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

export function getSampleWorkflows(): Workflow[] {
  return SAMPLE_WORKFLOWS;
}
